package docs

import "github.com/gobuffalo/packr"

// !!! GENERATED FILE !!!
// Do NOT hand edit this file!!
// It is recommended that you DO NOT check into this file into SCM.
// We STRONGLY recommend you delete this file after you have built your
// Go binary. You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("./", "package.go", "\"Ly8gUGFja2FnZSBkb2NzIEdvdGlmeSBSRVNULUFQSS4NCi8vDQovLyBUaGlzIGlzIHRoZSBkb2N1bWVudGF0aW9uIG9mIHRoZSBHb3RpZnkgUkVTVC1BUEkuDQovLw0KLy8gICAgIFNjaGVtZXM6IGh0dHAsIGh0dHBzDQovLyAgICAgSG9zdDogbG9jYWxob3N0DQovLyAgICAgVmVyc2lvbjogMS4wLjANCi8vICAgICBMaWNlbnNlOiBNSVQgaHR0cHM6Ly9naXRodWIuY29tL2dvdGlmeS9zZXJ2ZXIvYmxvYi9tYXN0ZXIvTElDRU5TRQ0KLy8gICAgIENvbnRhY3Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9nb3RpZnkvc2VydmVyL2lzc3Vlcw0KLy8NCi8vICAgICBDb25zdW1lczoNCi8vICAgICAtIGFwcGxpY2F0aW9uL2pzb24NCi8vDQovLyAgICAgUHJvZHVjZXM6DQovLyAgICAgLSBhcHBsaWNhdGlvbi9qc29uDQovLw0KLy8gICAgIFNlY3VyaXR5RGVmaW5pdGlvbnM6DQovLyAgICAgICAgYXBwVG9rZW5RdWVyeToNCi8vICAgICAgICAgICB0eXBlOiBhcGlLZXkNCi8vICAgICAgICAgICBuYW1lOiB0b2tlbg0KLy8gICAgICAgICAgIGluOiBxdWVyeQ0KLy8gICAgICAgIGNsaWVudFRva2VuUXVlcnk6DQovLyAgICAgICAgICAgdHlwZTogYXBpS2V5DQovLyAgICAgICAgICAgbmFtZTogdG9rZW4NCi8vICAgICAgICAgICBpbjogcXVlcnkNCi8vIAkgICAgICBhcHBUb2tlbkhlYWRlcjoNCi8vICAgICAgICAgICB0eXBlOiBhcGlLZXkNCi8vICAgICAgICAgICBuYW1lOiBYLUdvdGlmeS1LZXkNCi8vICAgICAgICAgICBpbjogaGVhZGVyDQovLyAJICAgICAgY2xpZW50VG9rZW5IZWFkZXI6DQovLyAgICAgICAgICAgdHlwZTogYXBpS2V5DQovLyAgICAgICAgICAgbmFtZTogWC1Hb3RpZnktS2V5DQovLyAgICAgICAgICAgaW46IGhlYWRlcg0KLy8gICAgICAgIGJhc2ljQXV0aDoNCi8vICAgICAgICAgICB0eXBlOiBiYXNpYw0KLy8NCi8vIHN3YWdnZXI6bWV0YQ0KcGFja2FnZSBkb2NzDQo=\"")
	packr.PackJSONBytes("./", "spec.json", "\"\"")
	packr.PackJSONBytes("./", "swagger.go", "\"cGFja2FnZSBkb2NzDQoNCmltcG9ydCAoDQoJImdpdGh1Yi5jb20vZ2luLWdvbmljL2dpbiINCgkiZ2l0aHViLmNvbS9nb2J1ZmZhbG8vcGFja3IiDQoJInN0cmluZ3MiDQopDQoNCi8vIFNlcnZlIHNlcnZlcyB0aGUgZG9jdW1lbnRhdGlvbi4NCmZ1bmMgU2VydmUoY3R4ICpnaW4uQ29udGV4dCkgew0KCWN0eC5Xcml0ZXIuV3JpdGVTdHJpbmcoZ2V0KGN0eC5SZXF1ZXN0LlVSTC5Ib3N0KSkNCn0NCg0KZnVuYyBnZXQoaG9zdCBzdHJpbmcpIHN0cmluZyB7DQoJYm94IDo9IHBhY2tyLk5ld0JveCgiLi8iKQ0KCXJldHVybiBzdHJpbmdzLlJlcGxhY2UoYm94LlN0cmluZygic3BlYy5qc29uIiksICJsb2NhbGhvc3QiLCBob3N0LCAxKQ0KfQ0K\"")
	}
