package docs

import "github.com/gobuffalo/packr"

// !!! GENERATED FILE !!!
// Do NOT hand edit this file!!
// It is recommended that you DO NOT check into this file into SCM.
// We STRONGLY recommend you delete this file after you have built your
// Go binary. You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("./", "package.go", "\"Ly8gUGFja2FnZSBkb2NzIEdvdGlmeSBSRVNULUFQSS4KLy8KLy8gVGhpcyBpcyB0aGUgZG9jdW1lbnRhdGlvbiBvZiB0aGUgR290aWZ5IFJFU1QtQVBJLgovLwovLyAgICAgU2NoZW1lczogaHR0cCwgaHR0cHMKLy8gICAgIEhvc3Q6IGxvY2FsaG9zdAovLyAgICAgVmVyc2lvbjogMS4wLjAKLy8gICAgIExpY2Vuc2U6IE1JVCBodHRwczovL2dpdGh1Yi5jb20vZ290aWZ5L3NlcnZlci9ibG9iL21hc3Rlci9MSUNFTlNFCi8vICAgICBDb250YWN0OiBodHRwczovL2dpdGh1Yi5jb20vZ290aWZ5L3NlcnZlci9pc3N1ZXMKLy8KLy8gICAgIENvbnN1bWVzOgovLyAgICAgLSBhcHBsaWNhdGlvbi9qc29uCi8vCi8vICAgICBQcm9kdWNlczoKLy8gICAgIC0gYXBwbGljYXRpb24vanNvbgovLwovLyAgICAgU2VjdXJpdHlEZWZpbml0aW9uczoKLy8gICAgICAgIGFwcFRva2VuUXVlcnk6Ci8vICAgICAgICAgICB0eXBlOiBhcGlLZXkKLy8gICAgICAgICAgIG5hbWU6IHRva2VuCi8vICAgICAgICAgICBpbjogcXVlcnkKLy8gICAgICAgIGNsaWVudFRva2VuUXVlcnk6Ci8vICAgICAgICAgICB0eXBlOiBhcGlLZXkKLy8gICAgICAgICAgIG5hbWU6IHRva2VuCi8vICAgICAgICAgICBpbjogcXVlcnkKLy8gCSAgICAgIGFwcFRva2VuSGVhZGVyOgovLyAgICAgICAgICAgdHlwZTogYXBpS2V5Ci8vICAgICAgICAgICBuYW1lOiBYLUdvdGlmeS1LZXkKLy8gICAgICAgICAgIGluOiBoZWFkZXIKLy8gCSAgICAgIGNsaWVudFRva2VuSGVhZGVyOgovLyAgICAgICAgICAgdHlwZTogYXBpS2V5Ci8vICAgICAgICAgICBuYW1lOiBYLUdvdGlmeS1LZXkKLy8gICAgICAgICAgIGluOiBoZWFkZXIKLy8gICAgICAgIGJhc2ljQXV0aDoKLy8gICAgICAgICAgIHR5cGU6IGJhc2ljCi8vCi8vIHN3YWdnZXI6bWV0YQpwYWNrYWdlIGRvY3MK\"")
	packr.PackJSONBytes("./", "spec.json", "\"\"")
	packr.PackJSONBytes("./", "swagger.go", "\"cGFja2FnZSBkb2NzCgppbXBvcnQgKAoJImdpdGh1Yi5jb20vZ2luLWdvbmljL2dpbiIKCSJnaXRodWIuY29tL2dvYnVmZmFsby9wYWNrciIKCSJzdHJpbmdzIgopCgovLyBTZXJ2ZSBzZXJ2ZXMgdGhlIGRvY3VtZW50YXRpb24uCmZ1bmMgU2VydmUoY3R4ICpnaW4uQ29udGV4dCkgewoJY3R4LldyaXRlci5Xcml0ZVN0cmluZyhnZXQoY3R4LlJlcXVlc3QuVVJMLkhvc3QpKQp9CgpmdW5jIGdldChob3N0IHN0cmluZykgc3RyaW5nIHsKCWJveCA6PSBwYWNrci5OZXdCb3goIi4vIikKCXJldHVybiBzdHJpbmdzLlJlcGxhY2UoYm94LlN0cmluZygic3BlYy5qc29uIiksICJsb2NhbGhvc3QiLCBob3N0LCAxKQp9Cg==\"")
	}
