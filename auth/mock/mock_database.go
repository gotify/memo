// Code generated by mockery v1.0.0
package mock

import mock "github.com/stretchr/testify/mock"
import model "github.com/jmattheis/memo/model"

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

// GetApplicationById provides a mock function with given fields: id
func (_m *MockDatabase) GetApplicationById(id string) *model.Application {
	ret := _m.Called(id)

	var r0 *model.Application
	if rf, ok := ret.Get(0).(func(string) *model.Application); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	return r0
}

// GetClientById provides a mock function with given fields: id
func (_m *MockDatabase) GetClientById(id string) *model.Client {
	ret := _m.Called(id)

	var r0 *model.Client
	if rf, ok := ret.Get(0).(func(string) *model.Client); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Client)
		}
	}

	return r0
}

// GetUserById provides a mock function with given fields: id
func (_m *MockDatabase) GetUserById(id uint) *model.User {
	ret := _m.Called(id)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(uint) *model.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	return r0
}

// GetUserByName provides a mock function with given fields: name
func (_m *MockDatabase) GetUserByName(name string) *model.User {
	ret := _m.Called(name)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	return r0
}
