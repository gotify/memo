// Code generated by mockery v1.0.0
package mock

import "github.com/stretchr/testify/mock"
import "github.com/jmattheis/memo/model"

// MockTokenDatabase is an autogenerated mock type for the TokenDatabase type
type MockTokenDatabase struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: token
func (_m *MockTokenDatabase) CreateToken(token *model.Token) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Token) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteToken provides a mock function with given fields: id
func (_m *MockTokenDatabase) DeleteToken(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTokenById provides a mock function with given fields: id
func (_m *MockTokenDatabase) GetTokenById(id string) *model.Token {
	ret := _m.Called(id)

	var r0 *model.Token
	if rf, ok := ret.Get(0).(func(string) *model.Token); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Token)
		}
	}

	return r0
}

// GetTokensByUser provides a mock function with given fields: userId
func (_m *MockTokenDatabase) GetTokensByUser(userId uint) []*model.Token {
	ret := _m.Called(userId)

	var r0 []*model.Token
	if rf, ok := ret.Get(0).(func(uint) []*model.Token); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Token)
		}
	}

	return r0
}
