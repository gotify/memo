// Code generated by mockery v1.0.0
package mock

import mock "github.com/stretchr/testify/mock"
import model "github.com/jmattheis/memo/model"

// MockUserDatabase is an autogenerated mock type for the UserDatabase type
type MockUserDatabase struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *MockUserDatabase) CreateUser(user *model.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserByID provides a mock function with given fields: id
func (_m *MockUserDatabase) DeleteUserByID(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByID provides a mock function with given fields: id
func (_m *MockUserDatabase) GetUserByID(id uint) *model.User {
	ret := _m.Called(id)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(uint) *model.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	return r0
}

// GetUserByName provides a mock function with given fields: name
func (_m *MockUserDatabase) GetUserByName(name string) *model.User {
	ret := _m.Called(name)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	return r0
}

// GetUsers provides a mock function with given fields:
func (_m *MockUserDatabase) GetUsers() []*model.User {
	ret := _m.Called()

	var r0 []*model.User
	if rf, ok := ret.Get(0).(func() []*model.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	return r0
}

// UpdateUser provides a mock function with given fields: user
func (_m *MockUserDatabase) UpdateUser(user *model.User) {
	_m.Called(user)
}
