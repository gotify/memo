// Code generated by mockery v1.0.0
package mock

import "github.com/stretchr/testify/mock"
import "github.com/gotify/server/model"

// MockMessageDatabase is an autogenerated mock type for the MessageDatabase type
type MockMessageDatabase struct {
	mock.Mock
}

// CreateMessage provides a mock function with given fields: message
func (_m *MockMessageDatabase) CreateMessage(message *model.Message) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMessageByID provides a mock function with given fields: id
func (_m *MockMessageDatabase) DeleteMessageByID(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMessagesByApplication provides a mock function with given fields: applicationID
func (_m *MockMessageDatabase) DeleteMessagesByApplication(applicationID uint) error {
	ret := _m.Called(applicationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(applicationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMessagesByUser provides a mock function with given fields: userID
func (_m *MockMessageDatabase) DeleteMessagesByUser(userID uint) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetApplicationByID provides a mock function with given fields: id
func (_m *MockMessageDatabase) GetApplicationByID(id uint) *model.Application {
	ret := _m.Called(id)

	var r0 *model.Application
	if rf, ok := ret.Get(0).(func(uint) *model.Application); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	return r0
}

// GetApplicationByToken provides a mock function with given fields: token
func (_m *MockMessageDatabase) GetApplicationByToken(token string) *model.Application {
	ret := _m.Called(token)

	var r0 *model.Application
	if rf, ok := ret.Get(0).(func(string) *model.Application); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	return r0
}

// GetMessageByID provides a mock function with given fields: id
func (_m *MockMessageDatabase) GetMessageByID(id uint) *model.Message {
	ret := _m.Called(id)

	var r0 *model.Message
	if rf, ok := ret.Get(0).(func(uint) *model.Message); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Message)
		}
	}

	return r0
}

// GetMessagesByApplication provides a mock function with given fields: id
func (_m *MockMessageDatabase) GetMessagesByApplication(id uint) []*model.Message {
	ret := _m.Called(id)

	var r0 []*model.Message
	if rf, ok := ret.Get(0).(func(uint) []*model.Message); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Message)
		}
	}

	return r0
}

// GetMessagesByUser provides a mock function with given fields: userID
func (_m *MockMessageDatabase) GetMessagesByUser(userID uint) []*model.Message {
	ret := _m.Called(userID)

	var r0 []*model.Message
	if rf, ok := ret.Get(0).(func(uint) []*model.Message); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Message)
		}
	}

	return r0
}
